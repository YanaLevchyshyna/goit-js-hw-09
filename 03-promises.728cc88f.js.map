{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAU,CACdC,SAAU,YACVC,SAAU,OACVC,aAAc,OACdC,QAAS,IACTC,kBAAmB,QAuCrB,SAASC,EAAcL,EAAUM,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAER,E,MAAUM,IAGtBG,EAAO,C,SAAET,E,MAAUM,GAAQ,GAC1BA,EAAM,G,EA9CA,CACXQ,KAAMC,SAASC,cAAc,SAC7BV,MAAOS,SAASC,cAAc,kBAC9BC,KAAMF,SAASC,cAAc,iBAC7BE,OAAQH,SAASC,cAAc,qBAG5BF,KAAKK,iBAAiB,UAE3B,SAAkBC,GAChBA,EAAEC,iBAEF,MAAQf,MAAAgB,EAAKL,KAAEA,EAAIC,OAAEA,GAAWE,EAAEG,cAAcC,SAEhD,IAAIC,EAAeC,OAAOJ,EAAMK,OAChC,MAAMC,EAAcF,OAAOT,EAAKU,OAC1BE,EAAgBH,OAAOR,EAAOS,OAEpC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAeC,GAAK,EACvCzB,EAAcyB,EAAGL,GACdM,MAAK,EAAC/B,SAAEA,EAAQM,MAAEA,MACjB0B,EAAAnC,GAASoC,OAAOC,QACd,qBAAqBlC,QAAeM,MACpCP,EACD,IAEFoC,OAAM,EAACnC,SAAEA,EAAQM,MAAEA,MAClB0B,EAAAnC,GAASoC,OAAOG,QACd,qBAAqBpC,QAAeM,MACpCP,EACD,IAEL0B,GAAgBG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst options = {\n  position: 'right-top',\n  distance: '12px',\n  borderRadius: '25px',\n  timeout: 6000,\n  cssAnimationStyle: 'fade',\n};\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  const { delay, step, amount } = e.currentTarget.elements;\n\n  let inputDelayEl = Number(delay.value);\n  const inputStepEl = Number(step.value);\n  const inputAmountEl = Number(amount.value);\n\n  for (let i = 1; i <= inputAmountEl; i += 1) {\n    createPromise(i, inputDelayEl)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `Fulfilled promise ${position} in ${delay}ms`,\n          options\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          ` Rejected promise ${position} in ${delay}ms`,\n          options\n        );\n      });\n    inputDelayEl += inputStepEl;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$options","position","distance","borderRadius","timeout","cssAnimationStyle","$47d4ff9957288465$var$createPromise","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","step","amount","addEventListener","e","preventDefault","delay1","currentTarget","elements","inputDelayEl","Number","value","inputStepEl","inputAmountEl","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.728cc88f.js.map"}